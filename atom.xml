<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>A blog on Mathematics and Haskell</title>
    <link href="madjestic.github.io/atom.xml/atom.xml" rel="self" />
    <link href="madjestic.github.io/atom.xml" />
    <id>madjestic.github.io/atom.xml/atom.xml</id>
    <author>
        <name>Vladimir Lopatin</name>
        <email>madjestic13@gmail.com</email>
    </author>
    <updated>2021-08-31T00:00:00Z</updated>
    <entry>
    <title>Are Polymorphic Output Functions, given a concrete type, Possible?</title>
    <link href="madjestic.github.io/atom.xml/posts/2021-08-31-polymorphic.html" />
    <id>madjestic.github.io/atom.xml/posts/2021-08-31-polymorphic.html</id>
    <published>2021-08-31T00:00:00Z</published>
    <updated>2021-08-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on August 31, 2021
    
</div>

<!-- BODY -->
<h3 id="are-polymorphic-output-functions-given-a-concrete-type-possible">Are Polymorphic Output Functions, given a concrete type, Possible?</h3>
<p>Let’s consider the following code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multi ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>multi <span class="st">&quot;Int&quot;</span>   <span class="ot">=</span> (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>multi <span class="st">&quot;Float&quot;</span> <span class="ot">=</span> (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Float</span>)          </span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Error</span> occurred</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">ERROR</span> line <span class="dv">5</span> <span class="op">-</span> <span class="dt">Type</span> <span class="fu">error</span> <span class="kw">in</span> explicitly typed binding</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Term</span>           <span class="op">:</span> multi</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Type</span>           <span class="op">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Does</span> <span class="fu">not</span> match <span class="op">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span></code></pre></div>
<p>Or</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multi ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>multi _   <span class="ot">=</span> <span class="fl">1.0</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Error</span> occurred</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">ERROR</span> line <span class="dv">4</span> <span class="op">-</span> <span class="dt">Cannot</span> justify constraints <span class="kw">in</span> explicitly typed binding</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Expression</span>    <span class="op">:</span> multi</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Type</span>          <span class="op">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Given</span> context <span class="op">:</span> ()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Constraints</span>   <span class="op">:</span> <span class="dt">Fractional</span> a</span></code></pre></div>
<p>Or even:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multi ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>multi _   <span class="ot">=</span> <span class="fl">1.0</span><span class="ot"> ::</span> <span class="dt">Float</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Error</span> occurred</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">ERROR</span> line <span class="dv">4</span> <span class="op">-</span> <span class="dt">Inferred</span> <span class="kw">type</span> is <span class="fu">not</span> general enough</span></code></pre></div>
<p>So that does not work. How about faking polymorphism via data type members?</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">X</span> <span class="ot">=</span> <span class="dt">X1</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">X2</span> <span class="dt">Float</span> <span class="op">|</span> <span class="dt">X3</span> <span class="dt">String</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Z</span> a <span class="ot">=</span> <span class="dt">Z1</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">Z2</span> <span class="dt">Float</span> <span class="op">|</span> <span class="dt">Z3</span> <span class="dt">String</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">bar ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Z</span> a</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>bar s <span class="ot">=</span> <span class="kw">case</span> s <span class="kw">of</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>          _       <span class="ot">-&gt;</span> <span class="dt">Z3</span><span class="ot"> undefined ::</span> <span class="dt">Z</span> a</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">--          &quot;Int&quot;   -&gt; Z1 1 :: Z Int</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="ot">foo ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>foo s <span class="ot">=</span> <span class="kw">case</span> s <span class="kw">of</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;Int&quot;</span>   <span class="ot">-&gt;</span> <span class="dt">X1</span> <span class="dv">1</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;Float&quot;</span> <span class="ot">-&gt;</span> <span class="dt">X2</span> <span class="fl">1.0</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>          _       <span class="ot">-&gt;</span> <span class="dt">X3</span> <span class="st">&quot;Vrotebal&quot;</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>		  </span></code></pre></div>
<p>That works, but our functions/types aren’t polymorphic in the original sense… So let’s modify the first example:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multi ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="kw">forall</span> a<span class="op">.</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>multi <span class="st">&quot;Int&quot;</span>   f <span class="ot">=</span> f (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>multi <span class="st">&quot;Float&quot;</span> f <span class="ot">=</span> f (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Float</span>)</span></code></pre></div>
<p>Now think about what f can be :P…</p>
<p>To be useful, you’ve got to include information that would let the caller figure out which of the two you’ve returned The easiest is obviously data Foo = FooInt Int | FooFloat Float, like in the second code example above. There’s also Data.Typeable, where the compiler provides some magic to give you a “tag” for every type and an existential wrapper that preserves the tag…</p>
<p>So, on the one hand the type of <code>... :: String -&gt; a</code> exists and is legit, e.g. <code>abort :: String -&gt; a</code>, <code>error :: String -&gt; a</code>, <code>absurd :: Void -&gt; a</code>, on the other hand they are, practically speaking, all special functions with seemingly no real way to make custom useful functions with the type of <code>... :: String -&gt; a</code>.</p>
<p>To see why this can’t work, consider</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  str <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> x <span class="ot">=</span> multi str <span class="co">-- What type does x have?</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> x <span class="co">-- Instances are chosen at compile time. Which</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- instance should be picked here? What should</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- the output be?</span></span></code></pre></div>
<p>I hope that helps in case you ended up in a similar rabbit hole of haskell polymorphism.</p>
<p><br />
Special thanks to the contributors, whose questions and comments have provoked this post: OlexP, Morrow, Xal, Ailrun the Corgi</p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>Haskell Gems</title>
    <link href="madjestic.github.io/atom.xml/posts/2021-03-27-haskell-gems.html" />
    <id>madjestic.github.io/atom.xml/posts/2021-03-27-haskell-gems.html</id>
    <published>2021-03-27T00:00:00Z</published>
    <updated>2021-03-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on March 27, 2021
    
</div>

<!-- BODY -->
<h3 id="examples-of-beautiful-haskell-code">Examples of beautiful haskell code</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">readFile</span> <span class="st">&quot;input.txt&quot;</span> <span class="op">&gt;&gt;=</span> <span class="fu">print</span><span class="op">.</span><span class="fu">length</span><span class="op">.</span><span class="fu">lines</span></span></code></pre></div>
<p><br />
</p>
<h3 id="lazy-pattern-matching">[Lazy Pattern Matching]</h3>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GADTs #-}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Foo</span> a <span class="kw">where</span> </span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ot">    foo ::</span> a </span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> a <span class="op">~</span> <span class="dt">Int</span> <span class="ot">=&gt;</span> <span class="dt">Foo</span> (a <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="kw">where</span> </span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    foo k <span class="ot">=</span> k</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (a <span class="op">~</span> <span class="dt">Int</span>, b <span class="op">~</span> <span class="dt">Int</span>) <span class="ot">=&gt;</span> <span class="dt">Foo</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="kw">where</span> </span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    foo k l <span class="ot">=</span> k<span class="op">+</span>l</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (a <span class="op">~</span> <span class="dt">String</span>) <span class="ot">=&gt;</span> <span class="dt">Foo</span> (a <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="kw">where</span> </span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    foo k <span class="ot">=</span> k</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- | usage: </span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- | foo 1 :: Int</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- | foo 1 2 :: Int</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- | foo &quot;bar&quot;:: String</span></span></code></pre></div>
<h3 id="transpose">[Transpose]</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Both of these produce a transpose:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>t&#39; <span class="ot">=</span> transpose <span class="op">.</span> V.toList <span class="op">$</span> d</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>t&#39; <span class="ot">=</span> getZipList <span class="op">.</span> <span class="fu">sequenceA</span> <span class="op">.</span> <span class="fu">map</span> <span class="dt">ZipList</span> <span class="op">$</span> V.toList v&#39;</span></code></pre></div>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>Why Template Haskell?</title>
    <link href="madjestic.github.io/atom.xml/posts/2020-09-01-why-template-haskell.html" />
    <id>madjestic.github.io/atom.xml/posts/2020-09-01-why-template-haskell.html</id>
    <published>2020-09-01T00:00:00Z</published>
    <updated>2020-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on September  1, 2020
    
</div>

<!-- BODY -->
<h3 id="why-template-haskell">Why Template Haskell?</h3>
<p>Among other thigs, it can generate boilerplate for you, so that you spend time on more important things.</p>
<p>Let’s say we have the following datatypes:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Project</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span>  <span class="dt">Project</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>     {</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">       name      ::</span> <span class="dt">String</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     ,<span class="ot"> resx      ::</span> <span class="dt">Int</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     ,<span class="ot"> resy      ::</span> <span class="dt">Int</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>     ,<span class="ot"> _models   ::</span> [<span class="dt">Model</span>]</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>     ,<span class="ot"> _textures ::</span> [<span class="dt">Texture</span>]</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>     ,<span class="ot"> _cameraP  ::</span> [<span class="dt">Float</span>]</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>     } <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>	 </span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Model</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span>  <span class="dt">Model</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>     {</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="ot">       _path ::</span> <span class="dt">String</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>     } <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Texture</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span>  <span class="dt">Texture</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>     {</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="ot">       _path ::</span> <span class="dt">String</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>     } <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
<p>If we wanted, we could write JSON interfaces for it like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Project</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  parseJSON (<span class="dt">Object</span> o) <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Project</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;$&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;name&quot;</span>)) </span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;*&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;resx&quot;</span>))</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;*&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;resy&quot;</span>))</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;*&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;models&quot;</span>))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;*&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;textures&quot;</span>))</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;*&gt;</span> ((o <span class="op">.:</span> <span class="st">&quot;project&quot;</span>) <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;camera&quot;</span>))</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  parseJSON _ <span class="ot">=</span> mzero</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Model</span> <span class="kw">where</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  parseJSON (<span class="dt">Object</span> o) <span class="ot">=</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Model</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;$&gt;</span> o <span class="op">.:</span> <span class="st">&quot;path&quot;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  parseJSON _ <span class="ot">=</span> mzero</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Texture</span> <span class="kw">where</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  parseJSON (<span class="dt">Object</span> o) <span class="ot">=</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Texture</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;$&gt;</span> o <span class="op">.:</span> <span class="st">&quot;path&quot;</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>  parseJSON _ <span class="ot">=</span> mzero</span></code></pre></div>
<p>Thanks to TH, we can write like this instead:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>deriveJSON defaultOptions &#39;<span class="dt">&#39;Project</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>deriveJSON defaultOptions &#39;<span class="dt">&#39;Model</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>deriveJSON defaultOptions &#39;<span class="dt">&#39;Texture</span></span></code></pre></div>
<p>Both are equivalent.</p>
<p>Cheers, Vlad.</p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>e1337</title>
    <link href="madjestic.github.io/atom.xml/posts/2020-05-17-e1337.html" />
    <id>madjestic.github.io/atom.xml/posts/2020-05-17-e1337.html</id>
    <published>2020-05-17T00:00:00Z</published>
    <updated>2020-05-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on May 17, 2020
    
</div>

<!-- BODY -->
<h3 id="making-a-space-sim-game-in-haskell.">Making a space-sim game in Haskell.</h3>
<h4 id="tags-haskell-opengl-frp-yampa-game.">#tags: haskell, opengl, frp, yampa, game.</h4>
<p><br />
</p>
<h4 id="heres-a-journal-of-a-space-game-ive-been-working-on.-it-is-written-in-haskell-uses-python-for-the-pipeline-opengl-4.5-yampa-sdl2.">Here’s a journal of a space game I’ve been working on. It is written in haskell, uses python for the pipeline, OpenGL 4.5+, Yampa, SDL2.</h4>
<p><br />
<img src="../images/output.png" /></p>
<p><a href="https://youtu.be/A5U13pmyawI">video</a></p>
<p><a href="https://github.com/madjestic/e1337">github</a></p>
<p><br />
</p>
<h3 id="the-beginning-a-mandelbrot-set.">00: The beginning: a mandelbrot set.</h3>
<h4 id="circa-2013-when-project-started-it-looked-like-there-was-nothing-suitable-for-using-as-a-basis-for-a-game.">Circa 2013, when project started, it looked like there was nothing suitable for using as a basis for a game.</h4>
<p>There was Gloss which seemed too high level, compared to OpenGL; there was lambdacube, which was a thing on it’s own (but that replaces mastering Haskell and OpenGL with mastering somebodys interpretation); there was gl-piles, which looked interesting, but was suffering from the same problem as lambdacube - basically being wrappers. I don’t like wrappers. Wrappers do little good, aside from looking like they solve a (complex) problem, hiding (unnecessary?) complexity away, while creating more confusion, because the underlying reasoning is hiddent away, replaced with another, arguably more accessible reasoning.</p>
<p>But we digress.</p>
<h4 id="i-started-where-i-left-off-the-haskell-opengl-tutorial">I started where I left off the <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial">Haskell-OpenGL-Tutorial</a>:</h4>
<p><img src="../images/output_01.png" /></p>
<h5 id="its-a-simple-hard-coded-scene-with-a-fixed-camera-2-triangles-with-a-material-consisting-from-a-vertex-and-a-fragmen-shader-with-animated-time-variable-fed-to-the-shader.">It’s a simple, hard-coded scene with a fixed camera, 2 triangles with a material consisting from a vertex and a fragmen shader, with animated time variable fed to the shader.</h5>
<p>At this point it was a like a desktop version of <a href="https://www.shadertoy.com/">shader-toy</a>. But why stopping there? There are cameras, animations and user-events, so let’s add these features:</p>
<p><br />
</p>
<h3 id="adding-basic-camera-controls.">01: Adding basic camera controls.</h3>
<p>GitHub is a great source of code examples. Though there seemed to be no suitabke stackoverflow questions and answers, or tutorials, despite hours of searching that gave little to no useful results, after mosh-pitting together a number of code samples from awesome folks from GitHub, basic camera controlls were added.<br />
No mouse input support yet. It feels like playing Doom with keyboard alone.</p>
<p><img src="../images/output_02.png" /> <a href="https://www.youtube.com/watch?v=JqIMZHPDk5o">video</a></p>
<p><img src="../images/output_03.png" /> <a href="https://www.youtube.com/watch?v=h6v8J7UkGFk">video</a></p>
<p><img src="../images/output_04.png" /> <a href="https://www.youtube.com/watch?v=qNefvisENXI">video</a></p>
<p><img src="../images/output_05.png" /> <a href="https://www.youtube.com/watch?v=jpZ_gdws-Nk">video</a></p>
<h3 id="loading-models.">02: Loading models.</h3>
<p>Loading anything more complex than a few triangles is begging for a model description and supporting authoring tools. There are many 3d modelling tools out there, I am most familiar with <a href="http://sidefx.com/">SideFX Houdini</a>, so let’s try to use the <a href="https://www.sidefx.com/products/houdini-apprentice/">free non-commercial version</a> and Houdini’s native <a href="https://www.sidefx.com/docs/houdini/io/formats/geo.html"><code>geo</code></a> format as a model description that our application can read and fix the gaps in-between with python plumbing.</p>
<p>Let’s start with ~40K triangles:</p>
<p><img src="../images/output_06.png" /> <a href="https://www.youtube.com/watch?v=lJfOzcvqTJ0">video</a></p>
<p>Increase to ~50K tris:</p>
<p><img src="../images/output_07.png" /> <a href="https://www.youtube.com/watch?v=7QpUubK6ADc">video</a></p>
<p>loading ~250K took a few hours.</p>
<p><img src="../images/output_08.png" /> <a href="https://www.youtube.com/watch?v=oiajlYck-50">video</a></p>
<h3 id="project-files-binary-file-format.">03: Project files, binary file format.</h3>
<p>At this point it became clear that:</p>
<ul>
<li>ascii json file format is impractical for reading models of more than 100K tris. We need a quick binary serialization.<br />
</li>
<li>It may be beneficial to use indexed geometry attributes.</li>
<li>Project format description is highly desirable, as it gets tedious changing hard-coded scenes every time the project needs to change.</li>
</ul>
<p>Let’s throw them in:</p>
<ul>
<li><a href="http://hackage.haskell.org/package/store-0.7.4/docs/Data-Store.html">Data.Store</a> for binary serialization.</li>
<li>Add attribute indexing.</li>
<li>Use json for describing project files like so:</li>
</ul>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;project&quot;</span><span class="fu">:</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;name&quot;</span>  <span class="fu">:</span> <span class="st">&quot;Mandelbrot&quot;</span><span class="fu">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resx&quot;</span>  <span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resy&quot;</span>  <span class="fu">:</span> <span class="dv">600</span><span class="fu">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;models&quot;</span><span class="fu">:</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>	<span class="ot">[</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/test.bgeo&quot;</span> <span class="fu">}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>	<span class="ot">]</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><img src="../images/output_09.png" /> <a href="https://www.youtube.com/watch?v=DApECcZsKfc">video</a></p>
<h3 id="debug-shaders-vertex-attributes.">04: Debug Shaders, vertex attributes.</h3>
<p>Basic model loading is working, let’s expand supported attributes: Color, Alpha, Normal, UVW: <img src="../images/output_10.png" /> <a href="https://www.youtube.com/watch?v=KVFu1DjKTCE">video</a></p>
<p>Add more test materials: <img src="../images/output_11.png" /> <a href="https://www.youtube.com/watch?v=IrTWsGjq6hc">video</a></p>
<h3 id="multiple-materials.">05: Multiple Materials.</h3>
<p>It is obvious that a single object may need more than one material: <img src="../images/output_12.png" /> <a href="https://www.youtube.com/watch?v=EYwBZOm5GNE">video</a></p>
<h3 id="multiple-objects.">06: Multiple Objects.</h3>
<p>Where’s many materials - there’s many objects. Expand the project description to support multiple objects:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;project&quot;</span><span class="fu">:</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;name&quot;</span>  <span class="fu">:</span> <span class="st">&quot;Eath, ISS&quot;</span><span class="fu">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resx&quot;</span>  <span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resy&quot;</span>  <span class="fu">:</span> <span class="dv">600</span><span class="fu">,</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;models&quot;</span><span class="fu">:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>	<span class="ot">[</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/earth.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/moon.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/iss_L1.bgeo&quot;</span> <span class="fu">}</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>	<span class="ot">]</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><img src="../images/output_13.png" /> <a href="https://www.youtube.com/watch?v=CSedgiMpKzg">video</a></p>
<p>Many objects with individual update loops, expand project description:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;project&quot;</span><span class="fu">:</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;name&quot;</span>  <span class="fu">:</span> <span class="st">&quot;Eath, ISS&quot;</span><span class="fu">,</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resx&quot;</span>  <span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resy&quot;</span>  <span class="fu">:</span> <span class="dv">600</span><span class="fu">,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;models&quot;</span><span class="fu">:</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>	<span class="ot">[</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/earth.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/moon.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/iss_L1.bgeo&quot;</span> <span class="fu">}</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>	<span class="ot">]</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><img src="../images/output_14.png" /> <a href="https://www.youtube.com/watch?v=S2WPuo63r5g">video</a></p>
<p>More testing: <img src="../images/output_15.png" /> <a href="https://www.youtube.com/watch?v=rnkZqXXqWYA">video</a></p>
<p>And more: <img src="../images/output_16.png" /> <a href="https://www.youtube.com/watch?v=Oqiyv4zhxWE">video</a></p>
<h3 id="setting-up-a-space-scene.">07: Setting up a space scene.</h3>
<p>Time to move beyond simple test scenes: <img src="../images/output_17.png" /> <a href="https://www.youtube.com/watch?v=oE2jpa8ojOk">video</a></p>
<h3 id="realistic-space-distances-and-proportions.">08: Realistic space distances and proportions.</h3>
<p>After initial composition is done, set the scene to realistic proportions and distances:</p>
<p><img src="../images/output_18.png" /> <a href="https://www.youtube.com/watch?v=W4Ry082HYCA">video</a></p>
<h3 id="loagarithmic-space.">09: Loagarithmic space.</h3>
<p>Realistic proportions reveal floating point precision issues, as seen in the video. Logarithmic scales seem to fix it:</p>
<p><img src="../images/output_19.png" /> <a href="https://www.youtube.com/watch?v=pHV2LUEQ-Dw">video</a></p>
<h3 id="saving-camera-position-and-more-fixes.">10: Saving camera position and more fixes.</h3>
<p>Rainbow colors of the vertices reveal errors in attribute values. Let’s fix that. Logarithmic scales cause clipping artifacts. Also let’s further expand project format to support initial camera position:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;project&quot;</span><span class="fu">:</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;name&quot;</span>  <span class="fu">:</span> <span class="st">&quot;Eath, ISS&quot;</span><span class="fu">,</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resx&quot;</span>  <span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;resy&quot;</span>  <span class="fu">:</span> <span class="dv">600</span><span class="fu">,</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;models&quot;</span><span class="fu">:</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>	<span class="ot">[</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/earth.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/moon.bgeo&quot;</span> <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>	    <span class="fu">{</span> <span class="dt">&quot;path&quot;</span><span class="fu">:</span> <span class="st">&quot;models/iss_L1.bgeo&quot;</span> <span class="fu">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>	<span class="ot">]</span><span class="fu">,</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;camera&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="dv">1</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>		   <span class="dv">0</span><span class="ot">,</span> <span class="dv">1</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>		   <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">1</span><span class="ot">,</span><span class="dv">-60</span><span class="ot">,</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>		   <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">0</span><span class="ot">,</span> <span class="dv">1</span><span class="ot">]</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p><img src="../images/output.png" /> <a href="https://www.youtube.com/watch?v=A5U13pmyawI">video</a></p>
<h4 id="references">References:</h4>
<p>https://learnopengl.com/ http://learnyouahaskell.com/</p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>Not a Monad Tutorial</title>
    <link href="madjestic.github.io/atom.xml/posts/2019-01-20-not-a-monad-tutorial.html" />
    <id>madjestic.github.io/atom.xml/posts/2019-01-20-not-a-monad-tutorial.html</id>
    <published>2019-01-20T00:00:00Z</published>
    <updated>2019-01-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on January 20, 2019
    
</div>

<!-- BODY -->
<p><img src="../images/Monad_and_the_blind.png" /></p>
<h4 id="lets-face-it-all-monad-tutorials-suck.-so-heres-another-one">Let’s face it: all monad tutorials suck. So here’s another one*:</h4>
<h3 id="what-is-monad">What is Monad?</h3>
<p><br />
The term “Monad” comes from mathematics or philosophy, which exact meaning is irrelevant to programming in haskell.</p>
<div class="small">
<p><em>Here’s the synopsis, but you really don’t need to read it:</em></p>
<p><em>A monad is a special case of a monoid.<br />
A monoid is a mathematical structure: Set Theory describes it as a (set of values + some operator + identity element).<br />
While Category Theory describes how it composes with other structures. Thus, (idea of) monad is related (loosely) to the (idea of a) function, defined over a set of elements, while identity element is required for mathematical consistency, which can be composed with other functions in a certain way.</em></p>
<p><em>Why bother giving such a fancy explanation for something which looks awfully like an ordinary function then?</em></p>
<p><em>Such interpretation of (the idea of) a function comes with a bonus from mathematics, as an algebra, allowing various code guarantees as well as ‘mathematically correct’ composability with other abstractions, which come with their own algebras and guarantees as well as ‘‘mathematically correct’… ad infinitum, while lambda calculus + syntactic sugar exposes it in haskell in the form of a Monad. For further reference: Set Theory and Category Theory.</em></p>
</div>
<p><em>It’s really a very basic and general idea, there’s not much to it, but it’s fleeing simplicity may feel like it’s hard to put a finger on</em>:<br />
It’s a value + sideffect.<br />
It’s a way to sequence things together.<br />
It’s a powerful building-block to write programs.<br />
It’s the biggest haskell PR fail.<br />
It’s just a monoid in the category of endofunctors.<br />
It’s a burrito.<br />
</p>
<h3 id="why-monad">Why Monad?</h3>
<p>Here’s what it means in practice: The infamous <code>&gt;&gt;=</code> helps us pass non-monadic values to functions without leaving a monad. In case of the Maybe monad, the monadic aspect is the qualifier that we don’t know with certainty whether the value will be… IO monad and do-notations gives as an elegant way to compose functions which arguably makes haskell the best language to write imperative programs.</p>
<p>In other words we sequence functional transformations of values in an intuitive way. It allows us to write complex functions in such a way, that instead of a hard to read mess of nested functions, we express it as a simple set of actions. We are syntactically chaining functions together.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">regularBurrito ::</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>regularBurrito <span class="ot">=</span> ()</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">monadicBurrito ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>monadicBurrito <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">do</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span>stuff<span class="op">...</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> ()</span></code></pre></div>
<p>and then, instead of</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>stomack <span class="ot">=</span> regularBurrito</span></code></pre></div>
<p>you can write</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>stomack <span class="ot">&lt;-</span> monadicBurrito</span></code></pre></div>
<p>which is much more appropriate, is not it? The benefit becomes more obvious when we need to chain multiple functions over a value.</p>
<p>More examples of using Maybe monad with with and without sugar</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- | let x = foo in x + 3          corresponds to      (\x -&gt; x + 3) foo</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- | x &lt;- foo; return (x + 3)      to     foo &gt;&gt;= (\x -&gt; return (x + 3))</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">displayResult ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>displayResult mx <span class="ot">=</span> <span class="fu">maybe</span> <span class="st">&quot;There was no result&quot;</span> ((<span class="st">&quot;The result was &quot;</span> <span class="op">++</span>) <span class="op">.</span> <span class="fu">show</span>) mx   </span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>              </span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | fromMaybe 0 (Just 1) - interesting example of Maybe and extracting</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- | values from Just   </span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>add mx my <span class="ot">=</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  mx <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> my <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> <span class="fu">return</span> (x <span class="op">+</span> y)))</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- | is equivalent to the following, using syntactic sugar:</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="ot">add&#39; ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>add&#39; mx my <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  x <span class="ot">&lt;-</span> mx</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  y <span class="ot">&lt;-</span> my</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> (x <span class="op">+</span> y)</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p><br />
</p>
<h3 id="custom-monads-how">Custom Monads, how?</h3>
<p>(creating bespoke monadic types)</p>
<p>Standard programming interface allows us defining ‘our own monads’ (monadic types):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Monad</span> m <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&gt;&gt;=)  ::</span> m a <span class="ot">-&gt;</span> (  a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&gt;&gt;)   ::</span> m a <span class="ot">-&gt;</span>  m b         <span class="ot">-&gt;</span> m b</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  return ::</span>   a                 <span class="ot">-&gt;</span> m a</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  fail   ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>Basically our custom type needs to implement this interface. In addition, it needs to satisfy the following laws, in order to be consistent with monadic algebra:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">return</span> a <span class="op">&gt;&gt;=</span> k                  <span class="ot">=</span>  k a</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>m        <span class="op">&gt;&gt;=</span> <span class="fu">return</span>             <span class="ot">=</span>  m</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>m        <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> k x <span class="op">&gt;&gt;=</span> h)  <span class="ot">=</span>  (m <span class="op">&gt;&gt;=</span> k) <span class="op">&gt;&gt;=</span> h</span></code></pre></div>
<p><a href="https://wiki.haskell.org/Monad">source</a></p>
<div class="small">
<em>TODO : add a concrete example of a custom type, which is not Maybe or IO</em>
</div>
<p><br />
</p>
<p>Once we’ve done that, i.e. once we’ve guaranteed that our new type is monadic, we can use all the monadic goodies, e.g. <code>&gt;&gt;=</code>, <code>do</code>, <code>&lt;-</code>, <a href="http://book.realworldhaskell.org/read/monad-transformers.html">Monad Transformers</a>, etc.<br />
<br />
</p>
<hr />
<p>* this is not a monad tutorial<br />
<br />
<br />
</p>
<div class="small">
P.S. I probably stole bits and pieces from somebody, so if you need a credit or think that I lied somewhere and there should be a correction, please, feel free to ping me.
</div>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>A Monad Tutorial</title>
    <link href="madjestic.github.io/atom.xml/posts/2019-01-19-a-monad-tutorial.html" />
    <id>madjestic.github.io/atom.xml/posts/2019-01-19-a-monad-tutorial.html</id>
    <published>2019-01-19T00:00:00Z</published>
    <updated>2019-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on January 19, 2019
    
</div>

<!-- BODY -->
<p><img src="../images/Monad_and_the_blind.png" /></p>
<h4 id="lets-face-it-all-monad-tutorials-suck.-so-heres-another-one">Let’s face it: all monad tutorials suck. So here’s another one:</h4>
<h3 id="what-is-monad">What is Monad?</h3>
<p><br />
The term “Monad” comes from mathematics or philosophy, which exact meaning is irrelevant to programming in haskell.</p>
<div class="small">
<p><em>Here’s the synopsis, but you really don’t need to read it:</em></p>
<p><em>A monad is a special case of a monoid.<br />
A monoid is a mathematical structure: Set Theory describes it as a (set of values + some operator + identity element).<br />
While Category Theory describes how it composes with other structures. Thus, (idea of) monad is related (loosely) to the (idea of a) function, defined over a set of elements, while identity element is required for mathematical consistency, which can be composed with other functions in a certain way.</em></p>
<p><em>Why bother giving such a fancy explanation for something which looks awefully like an ordinary function then?</em></p>
<p><em>Such interpretation of (the idea of) a function comes with a bonus from mathematics, as an algebra, allowing various code gurantees as well as ‘mathematically correct’ composability with other abstractions, which come with their own algebras and guarantees as well as ‘mathematematically correct’… ad infinitum, while lambda calculus + syntactic sugar exposes it in haskell in the form of a Monad. For further reference: Set Theory and Category Theory.</em></p>
</div>
<p><em>It’s really a very basic idea, there’s not much to it, but it’s a fleeing simplicity</em>:<br />
It’s a value + sideffect.<br />
It’s a way to sequence things together.<br />
It’s a powerful building-block to write programs.<br />
It’s the biggest haskell PR fail.<br />
It’s just a monoid in the category of endofunctors.<br />
It’s a burrito.<br />
</p>
<h3 id="why-monad">Why Monad?</h3>
<p>Here’s what it means in practice: The infamous <code>&gt;&gt;=</code> helps us pass non-monadic values to functions without leaving a monad. In case of the Maybe monad, the monadic aspect is the qualifier that we don’t know with certainty whether the value will be… IO monad and do-notations gives as an elegant way to compose functions which arguably makes haskell the best language to write imperative programs.</p>
<p>In other words we sequence functional transofrmations of values in an intuitive way. It allows us to write complex functions in such a way, that instead of a horrible nested mess, we get a simple set of imperative statements. We are syntactically chaining functions together.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">regularBurrito ::</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>regularBurrito <span class="ot">=</span> ()</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">monadicBurrito ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>monadicBurrito <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">do</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span>stuff<span class="op">...</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> ()</span></code></pre></div>
<p>and then, instead of</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>stomack <span class="ot">=</span> regularBurrito</span></code></pre></div>
<p>you can write</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>stomack <span class="ot">&lt;-</span> monadicBurrito</span></code></pre></div>
<p>which is much more appropriate, is not it? It becomes much more obvious if we need to compose multiple functions over a value.</p>
<p>More examples of using Maybe monad with with and without sugar</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- | let x = foo in x + 3          corresponds to      (\x -&gt; x + 3) foo</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- | x &lt;- foo; return (x + 3)      to     foo &gt;&gt;= (\x -&gt; return (x + 3))</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">displayResult ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>displayResult mx <span class="ot">=</span> <span class="fu">maybe</span> <span class="st">&quot;There was no result&quot;</span> ((<span class="st">&quot;The result was &quot;</span> <span class="op">++</span>) <span class="op">.</span> <span class="fu">show</span>) mx   </span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>              </span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | fromMaybe 0 (Just 1) - interesting example of Maybe and extracting</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- | values from Just   </span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>add mx my <span class="ot">=</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  mx <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> my <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> <span class="fu">return</span> (x <span class="op">+</span> y)))</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- | is equivalent to the following, using syntactic sugar:</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="ot">add&#39; ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>add&#39; mx my <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  x <span class="ot">&lt;-</span> mx</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  y <span class="ot">&lt;-</span> my</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> (x <span class="op">+</span> y)</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p><br />
</p>
<h3 id="custom-monads-how">Custom Monads, how?</h3>
<p>(creating bespoke monadic types)</p>
<p>Standard programming interface allows us defining ‘our own monads’ (monadic types):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Monad</span> m <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&gt;&gt;=)  ::</span> m a <span class="ot">-&gt;</span> (  a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&gt;&gt;)   ::</span> m a <span class="ot">-&gt;</span>  m b         <span class="ot">-&gt;</span> m b</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  return ::</span>   a                 <span class="ot">-&gt;</span> m a</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  fail   ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>Basically our custom type needs to implement this interface. In addition, it needs to satisfy the following laws, in order to be consistent with monadic algebra:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">return</span> a <span class="op">&gt;&gt;=</span> k                  <span class="ot">=</span>  k a</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>m        <span class="op">&gt;&gt;=</span> <span class="fu">return</span>             <span class="ot">=</span>  m</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>m        <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> k x <span class="op">&gt;&gt;=</span> h)  <span class="ot">=</span>  (m <span class="op">&gt;&gt;=</span> k) <span class="op">&gt;&gt;=</span> h</span></code></pre></div>
<p><a href="https://wiki.haskell.org/Monad">source</a></p>
<div class="small">
<em>TODO : add a concrete example of a custom type, which is not Maybe or IO</em>
</div>
<p><br />
</p>
<p>Once we’ve done that, i.e. once we’ve guranteed that our new type is monadic, we can use all the monadic goodies, e.g. <code>&gt;&gt;=</code>, <code>&lt;-</code>, <a href="http://book.realworldhaskell.org/read/monad-transformers.html">Monad Transformers</a>, etc.<br />
<br />
</p>
<div class="small">
P.S. I probably stole bits and pieces from somebody, so if you need a credit or think that I lied somewhere and there should be a correction, please, feel free to ping me.
</div>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>A quick-start with Euterpea</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-29-a-quick-start-with-Euterpea.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-29-a-quick-start-with-Euterpea.html</id>
    <published>2018-11-29T00:00:00Z</published>
    <updated>2018-11-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on November 29, 2018
    
</div>

<!-- BODY -->
<h4 id="a-guide-how-to-set-up-euterpea-and-make-some-noise.">A guide how to set up Euterpea and make some noise.</h4>
<p><br />
</p>
<p>We assume that you’ve got Euterpea installed either via cabal or a package manager, such as <a href="https://wiki.gentoo.org/wiki/Portage">portage</a>, if not:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> cabal install euterpea</span></code></pre></div>
<p>or</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> emerge euterpea                                                  </span></code></pre></div>
<p><br />
Let’s see if it gets picked up by ghci:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> ghci</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>     <span class="ex">GHCi,</span> version 8.4.4: http://www.haskell.org/ghc/  :<span class="pp">?</span> for help</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Loaded</span> GHCi configuration from /home/madjestic/.ghci</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Prelude</span> Text.Show.Unicode<span class="op">&gt;</span> import Euterpea</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Prelude</span> Text.Show.Unicode Euterpea<span class="op">&gt;</span></span></code></pre></div>
<p><br />
Now we will use JACK to create a playback device for Euterpea to use to play musice:</p>
<ul>
<li><p>start qjackctl</p></li>
<li><p>start qsynth</p></li>
<li><p>run the JACK server via qjackctl interface</p></li>
<li><p>run <code>devices</code> to see of Euterpea see the qsynth:</p></li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude</span> <span class="dt">Text.Show.Unicode</span> <span class="dt">Euterpea</span><span class="op">&gt;</span> devices</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Input</span> devices<span class="op">:</span> </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">InputDeviceID</span> <span class="dv">1</span>	<span class="dt">Midi</span> <span class="dt">Through</span> <span class="dt">Port</span><span class="op">-</span><span class="dv">0</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="dt">Output</span> devices<span class="op">:</span> </span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">OutputDeviceID</span> <span class="dv">0</span>	<span class="dt">Midi</span> <span class="dt">Through</span> <span class="dt">Port</span><span class="op">-</span><span class="dv">0</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">OutputDeviceID</span> <span class="dv">2</span>	qjackctl</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="dt">OutputDeviceID</span> <span class="dv">3</span>	<span class="dt">Synth</span> input port (qsynth<span class="op">:</span><span class="dv">0</span>)</span></code></pre></div>
<p>We can see here that qsynth is seen by Euterpea as a device number 3.</p>
<p><br />
Let’s ask Euterpea about instruments that it can play:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude</span> <span class="dt">Text.Show.Unicode</span> <span class="dt">Euterpea</span><span class="op">&gt;</span> <span class="op">:</span>i <span class="dt">InstrumentName</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Message</span> <span class="ot">=</span> <span class="op">...</span> <span class="op">|</span> <span class="dt">InstrumentName</span> <span class="op">!</span><span class="dt">String</span> <span class="op">|</span> <span class="op">...</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>   <span class="co">-- Defined in ‘Codec.Midi’</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>   <span class="kw">data</span> <span class="dt">InstrumentName</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>   <span class="ot">=</span> <span class="dt">AcousticGrandPiano</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>   <span class="op">|</span> <span class="dt">BrightAcousticPiano</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>   <span class="op">|</span> <span class="dt">ElectricGrandPiano</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>   <span class="op">|</span> <span class="dt">HonkyTonkPiano</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>   <span class="op">|</span> <span class="dt">RhodesPiano</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>   <span class="op">...</span></span></code></pre></div>
<p><br />
Finally, let’s tell Euterpea to send a note to qsynth (device number 3) via JACK to play:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>playDev <span class="dv">3</span> <span class="op">$</span> instrument <span class="dt">Clavinet</span> <span class="op">$</span> c <span class="dv">4</span> qn</span></code></pre></div>
<p>If all went fine, you should hear a sound being played.<br />
<br />
</p>
<p>Happy hacking!</p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>Creating a custom ebuild from a cabal package.</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-11-creating-a-custom-haskell-ebuild.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-11-creating-a-custom-haskell-ebuild.html</id>
    <published>2018-11-11T00:00:00Z</published>
    <updated>2018-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on November 11, 2018
    
</div>

<!-- BODY -->
<h4 id="do-you-want-to-add-a-new-haskell-library-to-portage-but-do-not-know-how-we-are-going-to-add-euterpea-music-library-for-haskell-as-an-example.">Do you Want to add a new haskell library to portage, but do not know how? We are going to add Euterpea music library for haskell as an example.</h4>
<h5 id="this-guide-does-not-use-a-custom-overlay">This guide does <em>not</em> use a custom overlay:</h5>
<p><br />
</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> mkdir <span class="at">-p</span> ~/overlays/gentoo-haskell</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> cd ~/overlays/gentoo-haskell</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo hackport <span class="at">-p</span> ~/overlays/gentoo-haskell/ update</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo hackport <span class="at">-p</span> /home/madjestic/overlays/gentoo-haskell/ make-ebuild dev-haskell ~/Projects/Haskell/Euterpea2/Euterpea.cabal</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo cp <span class="at">-R</span> /home/madjestic/overlays/gentoo-haskell/dev-haskell/euterpea/ /usr/local/portage/dev-haskell/</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> cd /usr/local/portage/dev-haskell/euterpea/</span></code></pre></div>
<p>We are almost ready to generate a file manifest (that’s what allows portage to see the new ebuild). This step is not strictly necessary, but it tells Manifest file to use thin format. Edit and past the following to <code>/usr/local/portage/metadata/layout.conf</code> (copied from gentoo-haskell):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">masters</span> = gentoo</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">cache-formats</span> = md5-dict</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">thin-manifests</span> = true</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">manifest-hashes</span> = BLAKE2B SHA512</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># too many ebuilds are using old EAPIs</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">#eapis-deprecated = 0 1 2 3 4</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">#let&#39;s start from smaller amount:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="ex">eapis-deprecated</span> = 0 1 2 3</span></code></pre></div>
<p>Next, we need to generate a manifest file. There are 2 options:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo ebuild ./euterpea-2.0.6.ebuild manifest</span></code></pre></div>
<p>or</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo repoman manifest</span></code></pre></div>
<p>(for more verbose output, you could run <code>sudo repoman full</code>)</p>
<p><em>If you plan to submit the package to gentoo-haskell overlay, the previous step can be performed inside the package directory of the cloned github image of the project fork.</em></p>
<p>Now we need to make the newly added ebuild visible to portage:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo emerge <span class="at">--sync</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>     <span class="ex">$</span> sudo emerge <span class="at">--search</span> euterpea                                                  <span class="kw">```</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>     </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Let</span><span class="st">&#39;s verify the setup:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="st">```bash</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="st">     $ emerge --search euterpea</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="st">     [ Results for search key : euterpea ]</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="st">     Searching...</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">      </span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="st">     *  dev-haskell/euterpea [ Masked ]</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="st">       Latest version available: 2.0.6</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">       Latest version installed: [ Not Installed ]</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="st">       Size of files: 11,387 KiB</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">       Homepage:      http://www.euterpea.com</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="st">       Description:   Library for computer music research and education</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="st">       License:       BSD</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="st">      </span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="st">       [ Applications found : 1 ]</span></span></code></pre></div>
<p>If all worked out as expected, now you can do <code>$ emerga euterpea</code> in order to merge the ebuild.<br />
<br />
</p>
<p>Happy hacking!</p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>Keystaion Mini 32 setup with JACK and qsynth check-list</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-05-keystation_midi_32_qjack_quick_start.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-05-keystation_midi_32_qjack_quick_start.html</id>
    <published>2018-11-05T00:00:00Z</published>
    <updated>2018-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on November  5, 2018
    
</div>

<!-- BODY -->
<h4 id="some-notes-primarily-to-myself-and-others-stuck-with-jack-keystation-mini-32-midi-keyborad-under-linux">Some notes primarily to myself and others stuck with JACK, keystation mini 32 midi keyborad under Linux</h4>
<p><br />
<br />
</p>
<p><a href="https://wiki.archlinux.org/index.php/USB_MIDI_keyboards">stolen from here:</a><br />
This guide assumes a kernel that has been setup to support MIDI devices, such as Keystation Mini 32, for example <a href="https://raw.githubusercontent.com/madjestic/nu/master/usr/src/linux/.config-linux-4.14.78-gentoo">this kernel config:</a><br />
Plug in the keyboard into the USB port and check if your dmesg is showing something similar:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dmesg</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[30937.290895]</span> usb 3-1: USB disconnect, device number 5</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">[30942.383408]</span> usb 3-1: new full-speed USB device number 11 using xhci_hcd</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">[30942.511908]</span> usb 3-1: New USB device found, idVendor=0a4d, idProduct=129d</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[30942.511913]</span> usb 3-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ex">[30942.511916]</span> usb 3-1: Product: Keystation Mini 32</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ex">[30942.511919]</span> usb 3-1: Manufacturer: Keystation Mini 32</span></code></pre></div>
<p><br />
Assuming that you do, let’s do the following checks:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> aconnect <span class="at">-l</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">client</span> 0: <span class="st">&#39;System&#39;</span> [type=kernel]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="ex">0</span> <span class="st">&#39;Timer           &#39;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">1</span> <span class="st">&#39;Announce        &#39;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>	<span class="ex">Connecting</span> To: 15:0, 128:0</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">client</span> 14: <span class="st">&#39;Midi Through&#39;</span> [type=kernel]</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="ex">0</span> <span class="st">&#39;Midi Through Port-0&#39;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>	<span class="ex">Connected</span> From: 20:0</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="ex">client</span> 15: <span class="st">&#39;OSS sequencer&#39;</span> [type=kernel]</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="ex">0</span> <span class="st">&#39;Receiver        &#39;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>	<span class="ex">Connected</span> From: 0:1</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="ex">client</span> 20: <span class="st">&#39;Keystation Mini 32&#39;</span> [type=kernel,card=1]</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="ex">0</span> <span class="st">&#39;Keystation Mini 32 MIDI 1&#39;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>	<span class="ex">Connecting</span> To: 14:0, 129:0</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> aseqdump <span class="at">-p</span> 20</span></code></pre></div>
<p>where <code>20</code> is the client number from the previous command - this can help you see if your midi device is producing any output. Then start qjackctrl and qsynth:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> qjackctl</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> qsynth</span></code></pre></div>
<p>If qsynth does not show up among ALSA devices, make sure that MIDI driver is set to <code>alsa_seq</code>, you should see a picture similar to the one below:<br />
<br />
<img src="../images/jack_midi_900.png" /><br />
<br />
If all went fine, connect your Keystation to Qsynth inside ALSA devices window and play some music!</p>
<p>References <a href="https://wiki.archlinux.org/index.php/USB_MIDI_keyboards">arch-linux wiki</a></p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>
<entry>
    <title>On Purity vs. Impurity in haskell.</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-02-on-purity-vs-impurity.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-02-on-purity-vs-impurity.html</id>
    <published>2018-11-02T00:00:00Z</published>
    <updated>2018-11-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- STYLESHEETS -->

<style>
img { 
    width: 100%; 
}
</style>

<!-- HEADER -->
<div class="info">
    Posted on November  2, 2018
    
</div>

<!-- BODY -->
<h4 id="on-purity-vs-impurity-in-haskell">On Purity vs Impurity in Haskell</h4>
<p><br />
</p>
<em>“<code>IO ()</code> type signature is like a ”Danger: Minefield!” sign - it does not mean that everywhere you step there’s going to be a mine, but there can be a mine somewhere”.</em>
<p style="text-align:right;">
(c) hoknamahn, a XXII century philosopher.
</p>
<p><br />
<br />
That’s in short. The whole story, however, is a little bit more complicated and goes somewhere along the lines the conversation I had on #haskell-beginners@freenode some time ago:<br />
<br />
</p>
<p><strong>Me:</strong> I am trying to understand the concept of purity, and though, on the surface, the distinction seems obvious, there seems to be cases, where things are not so blunt as ” <code>IO ()</code> means <em>impure</em>”, isn’t it?</p>
<p>For example, if pure = ref.transparent + no side effects <a href="https://en.wikipedia.org/wiki/Pure_function">(a definition from the wiki)</a>, then <code>fakeIO = return () :: IO ()</code> - does not it qualify as pure, even though its type is <code>IO ()</code>? It has no side effects, it always return the same value, it is, presumably, ref.transparent.</p>
<p>If <code>readLn</code> is obviously <em>impure</em>, is not <code>putStrLn "Hello"</code>, in a sense, pure? I guess it’s <em>impure</em>, since it can be printed in different ways (via various output devices), is it why it’s <em>impure</em>? It always returns the same value and its side effect seems limited by printing - can impurity of putStrLn lead to rocket launch from a Moon-base somehow?</p>
<p><strong>MarcelineVQ</strong>: IO is pure, you’ll be happy to know. The difference between <code>f :: String</code> and <code>f :: IO String</code> is that the first is a value of String and the second is an action that may result in a <code>String</code> when executed, haskell separates evaluation and execution, so both of these things are as pure as any other Haskell value in your code. <code>getLine :: IO String</code> contains a <code>String</code> in the same way that <code>/bin/ls</code> contains a list of files.</p>
<p>You may see <code>IO</code> called <em>impure</em> sometimes, however IO is entirely pure. For example something like <code>putStrLn "foo" :: IO ()</code> describes a recipe for writing some output to the outside world, this recipe is pure, any <code>putStrLn "foo" :: IO ()</code> are always the same recipe and working with the recipe has no side effects. Haskell separates evaluation and execution, we can combine and modify recipes all we like <strong>[evaluation]</strong> and it’s not until we’re baking the cake <strong>[execution]</strong> that side effects would even be possible.</p>
<p>The story is a little more complicated than that, but does this make sense as an idea?</p>
<p><strong>Me:</strong>: does it mean that a function can be <em>pure</em> during evaluation, but when executed it may be <em>impure</em> (have sideefects)?</p>
<p><strong>MarcelineVQ</strong>: That’s a great question, I’m not firm enough on the terminology to say for sure now that you’ve asked.</p>
<p><strong>dmwit</strong>: Everything (okay, almost everything) in Haskell is referentially transparent, even terms of type IO Whatever. Different people mean different things by “<em>pure</em>”, but referentially transparent has a solid, technical definition.</p>
<p><strong>Me:</strong> Thanks. I guess now I need to better understand what are sideeffects (SEs) then. Let’s say that SE is some sort of interaction with the world (like reading a file or printing to the screen (that changes the state of the videodriver, which draws something on the screen as a result)) - but where do you draw the line then? I.e.: is not everything an interaction with the world? Say, thunks are being generated - does not it change the state of RAM, hence interaction with the world, hence it’s a SE?</p>
<p><strong>ab9rf</strong>: Mmost of the time, we pretend that “processor state” doesn’t exist</p>
<p><strong>Me:</strong>: So, every other change of state outside of “processor state” can be considered as a SE?</p>
<p><strong>ab9rf</strong>: And so the “side effects” of making the processor do things, allocating memory, and so forth are ignored. we blithely assume that the processor will not malfunctio and that the runtime will not run out of memory.</p>
<p>Consider whatever you want to be a “side effect” :)</p>
<p>I think it’s better to approach this abstractly. Instead of spending a great deal of energy cataloging and categorizing the microscoping activities of the runtime system.</p>
<p><strong>Me:</strong>: I would like to settle on some solid ground here, if possible - I don’t want to think of it as a matter of taste</p>
<p><strong>jle</strong>: side-effect is basically a concept that applies differently in every context, there’s no ‘universal’ definition; it’s pretty much context. Basically, you get to define the world you are talking about, and in doing that you define what side effects are and what non-side-effects are</p>
<p><strong>Me</strong>: Nice, I like that! My next question after “what is <em>pure</em>, what is SE” would be: “what is <strong>world</strong>?” :)</p>
<p><strong>jle</strong>: right, the definition of world also depends on the context. It’s sort of like picking the primitives of your deontation, think of it like the idea of ‘universe’ in set theory, there is no absolute idea of universe, just whatever is useful for what theorem or conclusion you are trying to prove or figure out.</p>
<p><strong>Cale_:</strong>: It might all be much clearer if Haskell still had a formally specified <a href="https://en.wikipedia.org/wiki/Denotational_semantics">denotational semantics</a> (in principle it does, but in practice, nobody’s gone to the trouble since the very early versions)</p>
<p><strong>jle</strong>: even if haskell had a formally defined <a href="https://en.wikipedia.org/wiki/Denotational_semantics">denotational semantics</a>, you can still talk about your own mini denotative semantics in an EDSL you write, so you have a completely different idea of universe, sideeffects, etc.</p>
<p><strong>Cale_:</strong> Sure.</p>
<p><strong>Me:</strong> Interesting</p>
<p><strong>Cale_:</strong> I just mean, what people are usually talking about when they say “side effect” of a program is any behaviour of the program which we care about, but which isn’t captured by discussing values (in the sense of denotations of programs)</p>
<p><strong>Me:</strong> “still had a formally specified” - was it specified before?</p>
<p><strong>Cale_:</strong> Yeah, I think someone did Haskell 1.0. Or some core language of Haskell 1.0, and then other stuff was handled by translation into that core. An interesting thing is that by encoding effects into a type like IO, we turn things which would have been side-effects into values to some extent - though what can be understood denotationally about IO actions is still rather shallow (Conal Elliott has likened it to a syntax-level encoding, and that’s mostly right).</p>
<p>It still gives us a language with which to discuss equations between IO actions, but it doesn’t really tell us anything about what nontrivial equations might exist. For that, we’d need some machine model still – and so it becomes about the same as any imperative language. But still, you can maintain a distinction between evaluation of Haskell expressions, and execution of IO actions, and in ordinary Haskell programs, evaluation has no side effects, (while execution exists to carry out the effects described by the IO actions, so it seems strange to call them side effects at that point)<br />
<em>(getting off my train, headed to the airport bound for London for Haskell eXchange)</em><br />
<br />
<em>The communication ends here.</em></p>

<img src="../images/null.png" 
style="width:10px;height:10px;">
]]></summary>
</entry>

</feed>
