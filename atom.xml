<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>A blog on Mathematics and Haskell</title>
    <link href="madjestic.github.io/atom.xml/atom.xml" rel="self" />
    <link href="madjestic.github.io/atom.xml" />
    <id>madjestic.github.io/atom.xml/atom.xml</id>
    <author>
        <name>Vladimir Lopatin</name>
        <email>madjestic13@gmail.com</email>
    </author>
    <updated>2018-11-05T00:00:00Z</updated>
    <entry>
    <title>Keystaion Mini 32 setup with JACK and qsynth check-list</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-05-keystation_midi_32_qjack_quick_start.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-05-keystation_midi_32_qjack_quick_start.html</id>
    <published>2018-11-05T00:00:00Z</published>
    <updated>2018-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  5, 2018
    
</div>

<h2 id="some-notes-primarily-to-myself-and-others-stuck-with-jack-keystation-mini-32-midi-keyborad-under-linux">Some notes primarily to myself and others stuck with JACK, keystation mini 32 midi keyborad under Linux</h2>
<p><br />
<br />
</p>
<p><a href="https://wiki.archlinux.org/index.php/USB_MIDI_keyboards">stolen from here:</a><br />
This guide assumes a kernel that has been setup to support MIDI devices, such as Keystation Mini 32, for example <a href="https://raw.githubusercontent.com/madjestic/nu/master/usr/src/linux/.config-linux-4.14.78-gentoo">this kernel config:</a><br />
Plug in the keyboard into the USB port and check if your dmesg is showing something similar:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" title="1">$ <span class="fu">dmesg</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="ex">...</span></a>
<a class="sourceLine" id="cb1-3" title="3">[<span class="ex">30937.290895</span>] usb 3-1: USB disconnect, device number 5</a>
<a class="sourceLine" id="cb1-4" title="4">[<span class="ex">30942.383408</span>] usb 3-1: new full-speed USB device number 11 using xhci_hcd</a>
<a class="sourceLine" id="cb1-5" title="5">[<span class="ex">30942.511908</span>] usb 3-1: New USB device found, idVendor=0a4d, idProduct=129d</a>
<a class="sourceLine" id="cb1-6" title="6">[<span class="ex">30942.511913</span>] usb 3-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0</a>
<a class="sourceLine" id="cb1-7" title="7">[<span class="ex">30942.511916</span>] usb 3-1: Product: Keystation Mini 32</a>
<a class="sourceLine" id="cb1-8" title="8">[<span class="ex">30942.511919</span>] usb 3-1: Manufacturer: Keystation Mini 32</a></code></pre></div>
<p><br />
Assuming that you do, let’s do the following checks:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" title="1">$ <span class="fu">aconnect</span> -l</a>
<a class="sourceLine" id="cb2-2" title="2"><span class="ex">client</span> 0: <span class="st">&#39;System&#39;</span> [type=kernel]</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="ex">0</span> <span class="st">&#39;Timer           &#39;</span></a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="ex">1</span> <span class="st">&#39;Announce        &#39;</span></a>
<a class="sourceLine" id="cb2-5" title="5">	<span class="ex">Connecting</span> To: 15:0, 128:0</a>
<a class="sourceLine" id="cb2-6" title="6"><span class="ex">client</span> 14: <span class="st">&#39;Midi Through&#39;</span> [type=kernel]</a>
<a class="sourceLine" id="cb2-7" title="7">    <span class="ex">0</span> <span class="st">&#39;Midi Through Port-0&#39;</span></a>
<a class="sourceLine" id="cb2-8" title="8">	<span class="ex">Connected</span> From: 20:0</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="ex">client</span> 15: <span class="st">&#39;OSS sequencer&#39;</span> [type=kernel]</a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="ex">0</span> <span class="st">&#39;Receiver        &#39;</span></a>
<a class="sourceLine" id="cb2-11" title="11">	<span class="ex">Connected</span> From: 0:1</a>
<a class="sourceLine" id="cb2-12" title="12"><span class="ex">client</span> 20: <span class="st">&#39;Keystation Mini 32&#39;</span> [type=kernel,card=1]</a>
<a class="sourceLine" id="cb2-13" title="13">    <span class="ex">0</span> <span class="st">&#39;Keystation Mini 32 MIDI 1&#39;</span></a>
<a class="sourceLine" id="cb2-14" title="14">	<span class="ex">Connecting</span> To: 14:0, 129:0</a></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" title="1">$ <span class="ex">aseqdump</span> -p 20</a></code></pre></div>
<p>where <code>20</code> is the client number from the previous command - this can help you see if your midi device is producing any output. Then start qjackctrl and qsynth:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" title="1">$ <span class="ex">qjackctl</span></a>
<a class="sourceLine" id="cb4-2" title="2">$ <span class="ex">qsynth</span></a></code></pre></div>
<p>If qsynth does not show up among ALSA devices, make sure that MIDI driver is set to <code>alsa_seq</code>, you should see a picture similar to the one below:<br />
<br />
<img src="../images/jack_midi_900.png" /><br />
<br />
If all went fine, connect your Keystation to Qsynth inside ALSA devices window and play some music!</p>
<p>References <a href="https://wiki.archlinux.org/index.php/USB_MIDI_keyboards">arch-linux wiki</a></p>
]]></summary>
</entry>
<entry>
    <title>On Purity vs. Impurity in haskell.</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-02-on-purity-vs-impurity.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-02-on-purity-vs-impurity.html</id>
    <published>2018-11-02T00:00:00Z</published>
    <updated>2018-11-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  2, 2018
    
</div>

<h2 id="this-is-some-working-material-for-the-future-post">This is some working material for the future post</h2>
<p><br />
<br />
</p>
<p>me &gt; I am trying to understand the concept of purity, and though, on the surface, the distinction seems obvious, there seems to be cases, where things are not so blunt as &quot; <code>IO ()</code> means impure“, isn’t it? me &gt; e.g. if pure = ref.transparent + no side effects, then <code>fakeIO        = return () :: IO ()</code> - does not it qualify as pure, even though it’s IO ()? It has no side effects, it always return the same value, it is, presumably, ref.transparent. me &gt; if <code>readLn</code> is obviously impure, is not <code>putStrLn        &quot;Hello&quot;</code>, in a sense, pure? I guess it’s impure, since it can be printed in different ways (via various output devices), is it why it’s impure? me &gt; otherwise it always returns the same value and its side effect seems limited by printing - can impurity of putStrLn lead to rocket launch from a Moon-base somehow? <MarcelineVQ> IO is pure, you’ll be happy to know. The difference between f :: String and f :: IO String is that the first is a value of String and the second is an action that may result in a String when executed, haskell separates evaluation and execution, so both of these things are as pure as any other Haskell value in your code <MarcelineVQ> <span class="citation" data-cites="quote">@quote</span> /ls <lambdabot> shachaf says: getLine :: IO String contains a String in the same way that /bin/ls contains a list of files <MarcelineVQ> You may see IO called impure sometimes, however IO is entirely pure. For example something like putStrLn”foo&quot; :: IO () describes a recipe for writing some output to the outside world, this recipe is pure, any putStrLn “foo” :: IO () are always the same recipe and working with the recipe has no side effects. Haskell separates evaluation and execution, we can combine and modify recipes all we like [evaluation] and it’s <MarcelineVQ> not until we’re baking the cake [execution] that side effects would even be possible. <MarcelineVQ> The story is a little more complicated than that, but does this make sense as an idea? me &gt; does it mean that a function can be pure during evaluation, but when executed it may be impure (have sideefects)? <MarcelineVQ> That’s a great question, I’m not firm enough on the terminology to say for sure now that you’ve asked. <dmwit> madjestic: Everything (okay, almost everything) in Haskell is referentially transparent, even terms of type IO Whatever. <dmwit> Different people mean different things by “pure”, but referentially transparent has a solid, technical definition. me &gt; thanks. I guess now I need to better understand what are sideeffects (SEs) then. Let’s say that SE is some sort of interaction with the world (like reading a file or printing to the screen (that changes the state of the videodriver, which draws something on the screen as a result)) - but where do you draw the line then? I.e.: is not everything an interaction with the world? Say, thunks are being generated - does not it change the me &gt; state of RAM, hence interaction with the world, hence it’s a SE? <ab9rf> madjestic: most of the time, we pretend that “processor state” doesn’t exist me &gt; so every other change of state outside of “processor state” can be considered as a SE? <ab9rf> and so the “side effects” of making the processor do things, allocating memory, and so forth are ignored. we blithely assume that the processor will not malfunctio and that the runtime will not run out of memory <ab9rf> madjestic: consider whatever you want to be a “side effect” :) &lt;jle<code>&gt; side-effect is basically a concept that applies differently in        every context, there's no 'universal' definition; it's pretty much        context    me &gt; I would like to settle on some solid ground here, if possible - I        don't want to think of it as a matter of taste    &lt;ab9rf&gt; i think it's better to approach this abstractly    &lt;jle</code>&gt; basically you get to define the world you are talking about, and in doing that you define what side effects are and what non-side-effects are me &gt; nice, I like that <ab9rf> instead of spending a great deal of energy cataloging and categorizing the microscoping activities of the runtime system me &gt; coz my next question after “what is pure, what is SE” would be “what is world?” :) &lt;jle<code>&gt; it's sort of like picking the primitives of your deontation    &lt;jle</code>&gt; right, the definition of world also depends on the context &lt;jle<code>&gt; think of it like the idea of 'universe' in set theory        left #haskell-beginners: Quit: Konversation terminated!    &lt;jle</code>&gt; there is no absolute idea of universe, just whatever is useful for what theorem or conclusion you are trying to prove or figure out <Cale_> It might all be much clearer if Haskell still had a formally specified denotational semantics (in principle it does, but in practice, nobody’s gone to the trouble since the very early versions) &lt;jle<code>&gt; even if haskell had a formally defined denotational semantics,        you can still talk about your own mini denotative semantics in an        EDSL you write    &lt;jle</code>&gt; so you have a completely different idea of universe, side effects, etc. <Cale_> Sure W. Flint) me &gt; interesting <Cale_> I just mean, what people are usually talking about when they say “side effect” of a program is any behaviour of the program which we care about, but which isn’t captured by discussing values (in the sense of denotations of programs) me &gt; Cale_: “still had a formally specified denotational semantics” - was it specified before? realname) <Cale_> Yeah, I think someone did Haskell 1.0 <Cale_> Or some core language of Haskell 1.0, and then other stuff was handled by translation into that core me &gt; wow, DS seems like yet another world of its own me &gt; I wish I got to that sort of stuff at the uni <Cale_> an interesting thing is that by encoding effects into a type like IO, we turn things which would have been side-effects into values to some extent – though what can be understood denotationally about IO actions is still rather shallow (Conal Elliott has likened it to a syntax-level encoding, and that’s mostly right) <Cale_> It still gives us a language with which to discuss equations between IO actions, but it doesn’t really tell us anything about what nontrivial equations might exist <Cale_> For that, we’d need some machine model still – and so it becomes about the same as any imperative language left #haskell-beginners: Quit: Leaving <Cale_> But still, you can maintain a distinction between evaluation of Haskell expressions, and execution of IO actions, and in ordinary Haskell programs, evaluation has no side effects. W. Flint) <Cale_> (while execution exists to carry out the effects described by the IO actions, so it seems strange to call them side effects at that point) <Cale_> (getting off my train, headed to the airport bound for London for Haskell eXchange)</p>
<p><img src="../images/my_image.png" /><br />
<br />
</p>
<p><a href="https://ref_link_addres">ref name</a><br />
My Text<br />
previous: <a href="../posts/previous_post_name.html">Previous Post</a></p>
]]></summary>
</entry>
<entry>
    <title>A new revolutionary hybrid gameplay idea.</title>
    <link href="madjestic.github.io/atom.xml/posts/2018-11-02-on-hybrid-singleplayer.html" />
    <id>madjestic.github.io/atom.xml/posts/2018-11-02-on-hybrid-singleplayer.html</id>
    <published>2018-11-02T00:00:00Z</published>
    <updated>2018-11-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  2, 2018
    
</div>

<h2 id="a-train-of-thought-from-skype">A train of thought from skype</h2>
<p><br />
<br />
</p>
<p>гибридный мульти / сингл плейер. Короче космосим, у каждого игрока - свое дерево событий в пространстве-времени (4Д дерево, или 3Д дерев плюс рост). Такие деревйя событий (фактически версий реалжности) можно шарить по желанию. Т.е. ты можешь решить, что реальности каких-то игроков могут быть внедрены в твою, это тоже самое, что и мерж набора деревьев, в результате события, генерируемые другими игроками игроками сгенеруруют копии событий. Каждое событие имеет уникальный индентификатор, таким образом оно порождает свое дерево. Если событие становится недоступным в результате вмешательства, то и все порожденное им дерево становится недоступным.Т.е. это такой “непрямой” мультиплеер.Возможен вариант прямого мультиплеера, когда набор игроков “синхронизируются” в пространстве времени (например на основе наиболее старшей вселенной) и порождает свою ветку событий, которые в данном случае легко мержатся с имеющимися текущими деревьями событий участников. Легко можно представить, когда набор друзей шарят ветки между друг другом или напрямую, или непрямо (отложенно).Ну и это, имхо, идеальный мультиплеер для хикканов.Sent on:MonFrom:Skull of Steel ха прикольноSent on:Monтаким образом синглплеер не нужно генерить искусственно, либо генерить можно, но ограниченно и не опасяться, что сингл - слишком искуственен и лишен пристутствия следов разумного вмешательства.Sent on:Monопять же это решает проблему школоты, которая неизбежна в мультиплеере, что эквивалентно школоте в твоей вселенной.</p>
<p><img src="../images/my_image.png" /><br />
<br />
</p>
<p><a href="https://ref_link_addres">ref name</a><br />
My Text<br />
previous: <a href="../posts/previous_post_name.html">Previous Post</a></p>
]]></summary>
</entry>
<entry>
    <title>Haskell OpenGL Tutorial':'drawing textured triangles.</title>
    <link href="madjestic.github.io/atom.xml/posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html" />
    <id>madjestic.github.io/atom.xml/posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html</id>
    <published>2016-02-28T00:00:00Z</published>
    <updated>2016-02-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 28, 2016
    
</div>

<h2 id="haskell-opengl-tutorial-textured-triangles.">Haskell OpenGL Tutorial: textured triangles.</h2>
<p><br />
<br />
</p>
<p><img src="../images/tutorial03.png" /><br />
<br />
</p>
<p><a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial03">tutorial files on GitHub</a><br />
In the next tutorial we are going to create an animated object, using FRP.<br />
previous: <a href="../posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html">Haskell OpenGL Tutorial: Drawing a colored triangle.</a></p>
]]></summary>
</entry>
<entry>
    <title>A Haskell OpenGL Boilerplate</title>
    <link href="madjestic.github.io/atom.xml/posts/2016-02-02-Boilerplate.html" />
    <id>madjestic.github.io/atom.xml/posts/2016-02-02-Boilerplate.html</id>
    <published>2016-02-02T00:00:00Z</published>
    <updated>2016-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  2, 2016
    
</div>

<h3 id="a-haskell-opengl-boilerplate">A Haskell OpenGL Boilerplate</h3>
<p>An attempt to create a concise modern OpenGL Boilerplate.</p>
<p><a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/Boilerplate">here</a> and <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/minimumBoilerplate">here</a></p>
]]></summary>
</entry>
<entry>
    <title>VEX':'Better practices</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-03-01-vex-better-practices.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-03-01-vex-better-practices.html</id>
    <published>2015-03-01T00:00:00Z</published>
    <updated>2015-03-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  1, 2015
    
</div>

<h2 id="vex-better-practices">VEX: Better practices</h2>
<p><br />
</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="dt">int</span> index = <span class="dv">-1</span>;</a>
<a class="sourceLine" id="cb1-3" title="3"><span class="dt">float</span> tmp = <span class="fl">-1.0f</span>;</a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; ncount; i++)</a>
<a class="sourceLine" id="cb1-6" title="6">{</a>
<a class="sourceLine" id="cb1-7" title="7">  nbrnum = neighbour(geoself(), ptnum, i);</a>
<a class="sourceLine" id="cb1-8" title="8">	<span class="cf">if</span> ( product_list[i] &gt; tmp &amp;&amp; not_element_of(visited, nbrnum))</a>
<a class="sourceLine" id="cb1-9" title="9">	{</a>
<a class="sourceLine" id="cb1-10" title="10">		index = i;</a>
<a class="sourceLine" id="cb1-11" title="11">		tmp = product_list[i];</a>
<a class="sourceLine" id="cb1-12" title="12">	}</a>
<a class="sourceLine" id="cb1-13" title="13">};</a>
<a class="sourceLine" id="cb1-14" title="14">	</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="cf">return</span> index;</a></code></pre></div>
<p><br />
</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">int</span> sorted_index[] = argsort(product_list);</a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="cf">for</span>(<span class="dt">int</span> i = len(sorted_index)-<span class="dv">1</span>; i &gt;= <span class="dv">0</span>; i--)</a>
<a class="sourceLine" id="cb2-4" title="4">{</a>
<a class="sourceLine" id="cb2-5" title="5"> nbrnum = neighbour(geoself(), ptnum, pop(sorted_index));                             		</a>
<a class="sourceLine" id="cb2-6" title="6"> <span class="cf">if</span> (not_element_of(visited, nbrnum)){index = nbrnum; <span class="cf">break</span>;}</a>
<a class="sourceLine" id="cb2-7" title="7">}</a>
<a class="sourceLine" id="cb2-8" title="8">		</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="cf">return</span> index;</a></code></pre></div>
<p>The latter is go, the former - no go. (The former is idiomatic to VOPs)</p>
]]></summary>
</entry>
<entry>
    <title>Haskell OpenGL Tutorial':'colored triangle.</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html</id>
    <published>2015-02-22T00:00:00Z</published>
    <updated>2015-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 22, 2015
    
</div>

<h2 id="haskell-opengl-tutorial-colored-triangle.">Haskell OpenGL Tutorial: colored triangle.</h2>
<p><br />
<br />
Credits:</p>
<p>I would like to thank <a href="https://github.com/svenpanne">Sven Panne</a> for providing valuable advice on OpenGL statefulness as well as creating a great set of <a href="https://github.com/haskell-opengl/GLUT/blob/master/examples/RedBook8/Chapter01/Triangles.hs">examples</a>. Without his work, this set of tutorials may not be possible, parts and bits of ios source code is used in various shapes and forms throught these pages.</p>
<p>Sven has recently uploaded a bare-bones <a href="https://github.com/haskell-opengl/GLUT/tree/master/examples/Misc/ColorTriangle">vertex-color triangle example</a> Somebody may find it more useful to follow, because in this tutorial the code related to vertex colors is coupled with NGL.</p>
<p><img src="../images/tutorial04.png" /><br />
<br />
<a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial04">tutorial files on GitHub</a><br />
<br />
</p>
<p>next: <a href="../posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html">Haskell OpenGL Tutorial: Drawing textured triangles.</a><br />
previous: <a href="../posts/2013-12-30-post-post-modern-opengl-in-haskell-3.html">Haskell OpenGL Tutorial: Resizing main window, key-events.</a><br />
</p>
]]></summary>
</entry>
<entry>
    <title>2+2=4</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-02-22-2-plus-2-equals-4.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-02-22-2-plus-2-equals-4.html</id>
    <published>2015-02-22T00:00:00Z</published>
    <updated>2015-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 22, 2015
    
</div>

<h2 id="section">2+2=4</h2>
<p><br />
“Leibniz’s proof that 2 + 2 = 4 contains a gap. Grassmann’s definition of a + b is faulty”<br />
from <a href="../files/frege_FOA.pdf">Gottlob Frege: The Foundations of Arithmetic</a><br />
<br />
I am not crazy, and it’s a legit question :P<br />
<br />
“A typical crudity confronts me, when I find calculation described as ‘aggregative mechanical thought’. I doubt whether there exists any though whatsoever answering to this description.”<br />
<br />
“A proposition can be though, and again it may be true; let us never confuse the two things.”<br />
<br />
“Est modus in rebus, sunt certi denique fines” - “There is a measure in all things”<br />
<br />
3 laws of enquiry:<br />
1. Always to separate sharply the psychological from logical, the subjective from the objective;<br />
2. Never to ask for the meaning of the word in isolation, but only in the context of a propositon;<br />
3. Never to loose sight of the distinciton between concept and object.<br />
<br />
(from Shroder) “Abstract number, then, is the empty form of difference.”<br />
<br />
“Hardly anything more unfortunate can befall a scientific writer than to have one of the foundations of his edifice shaken after the work is finished. This was the position I was placed in by a letter of Mr. Bertrand Russell, just when the printing of this volume was nearing its completion.”<br />
</p>
]]></summary>
</entry>
<entry>
    <title>An awesome free-game!</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-07-15-another-gem-on-the-road.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-07-15-another-gem-on-the-road.html</id>
    <published>2014-07-15T00:00:00Z</published>
    <updated>2014-07-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 15, 2014
    
</div>

<h2 id="free-game"><a href="https://github.com/fumieval/free-game">free-game</a></h2>
<p>A little gem I found on the way and wish to share with everybody who is in a similar situation.<br />
<br />
</p>
<h3 id="free-game-gives-you-a-world-so-that-you-can-create-games-easily.">“free-game gives you a world so that you can create games easily.”</h3>
<p><br />
<br />
</p>
<p>If you, like me, have been looking for a graphics library and you are obsessive-compulsive about minimalism and bloat-ware, than chances are, <a href="/posts/2013-12-30-post-post-modern-opengl-in-haskell-1.html">like me</a>, you can’t stand the idea of relying on <a href="http://gloss.ouroborus.net/">GLOSS</a> as a graphical backend of your project, than you may be delighted to find out that there’s something out there that is small, fresh, readable, that may be just enough for whatever graphics project you may have in mind: <a href="https://github.com/fumieval/free-game">free-game</a><br />
<br />
</p>
<p><img src="../images/free_game_demo.png" /><br />
<br />
</p>
<p>It’s minimal, here’s the list of dependencies:</p>
<pre><code>    array &gt;= 0.4,
    base == 4.*,
    colors == 0.1.*,
    containers &gt;= 0.4,
    control-bool,
    directory &gt;= 1.0,
    filepath &gt;= 1.3,
    free &gt;= 4.6.1 &amp;&amp; &lt; 5,
    freetype2 &gt;= 0.1,
    GLFW-b &gt;= 1.3 &amp;&amp; &lt;2,
    hashable &gt;= 1.2,
    JuicyPixels,
    JuicyPixels-util == 0.1.*,
    linear &gt;= 1.0 &amp;&amp; &lt; 2,
    mtl &gt;= 2.1,
    OpenGL == 2.9.*,
    OpenGLRaw == 1.4.*,
    random == 1.*,
    reflection == 1.*,
    template-haskell,
    transformers &gt;= 0.3,
    vector &gt;= 0.9 &amp;&amp; &lt;0.12,
    void &gt;= 0.5,
    boundingboxes &gt;= 0.2 &amp;&amp; &lt; 0.4,
    lens &gt;= 3.8 &amp;&amp; &lt; 5</code></pre>
<p><br />
</p>
<p>Here’s, for comparison sake, the list of dependencies for <a href="https://github.com/madjestic/NGL">NGL</a>:</p>
<pre><code>	base == 4.*,
	GLFW-b &gt;= 1.3 &amp;&amp; &lt;2,	
	OpenGL == 2.9.*,
	OpenGLRaw == 1.4.*,
	bytestring &gt;= 0.10.0.2</code></pre>
<p>(yes it’s less, but <a href="https://github.com/madjestic/NGL">NGL</a> is not doing anything besides drawing <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial06">colorful triangles</a>, yet )</p>
<p>The total amount of lines of code of Free-Game is 1727 lines (including white-space). Pretty impressive tight code base that supports:</p>
<p>drawing primitives (lines and shapes)<br />
textures<br />
animation<br />
anti-aliasing and filtering<br />
font-rendering<br />
input-handling (user-event system)<br />
<br />
</p>
<p>All in tight 100Kb of code, brought to you by <a href="https://github.com/fumieval">Fumiaki Kinoshita</a></p>
]]></summary>
</entry>
<entry>
    <title>Product Rule</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-05-22-product-rule.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-05-22-product-rule.html</id>
    <published>2014-05-22T00:00:00Z</published>
    <updated>2014-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 22, 2014
    
</div>

<h3 id="mst124-playing-with-product-rule.">MST124, playing with Product Rule.</h3>
<p><br />
<br />
</p>
<p>Things are becoming obvious.</p>
<p><br />
<br />
<img src="../images/product_rule.png" /></p>
]]></summary>
</entry>

</feed>
