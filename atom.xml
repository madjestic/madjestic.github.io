<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>A blog on Mathematics and Haskell</title>
    <link href="madjestic.github.io/atom.xml/atom.xml" rel="self" />
    <link href="madjestic.github.io/atom.xml" />
    <id>madjestic.github.io/atom.xml/atom.xml</id>
    <author>
        <name>Vladimir Lopatin</name>
        <email>madjestic13@gmail.com</email>
    </author>
    <updated>2016-02-28T00:00:00Z</updated>
    <entry>
    <title>Haskell OpenGL Tutorial: drawing textured triangles.</title>
    <link href="madjestic.github.io/atom.xml/posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html" />
    <id>madjestic.github.io/atom.xml/posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html</id>
    <published>2016-02-28T00:00:00Z</published>
    <updated>2016-02-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 28, 2016
    
</div>

<h2 id="haskell-opengl-tutorial-textured-triangles.">Haskell OpenGL Tutorial: textured triangles.</h2>
<p><br />
<br />
 <img src="../images/tutorial03.png" alt="" /><br />
<br />
 <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial03">tutorial files on GitHub</a><br />
In the next tutorial we are going to create an animated object, using FRP.<br />
previous: <a href="../posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html">Haskell OpenGL Tutorial: Drawing a colored triangle.</a></p>
]]></summary>
</entry>
<entry>
    <title>A Haskell OpenGL Boilerplate</title>
    <link href="madjestic.github.io/atom.xml/posts/2016-02-02-Boilerplate.html" />
    <id>madjestic.github.io/atom.xml/posts/2016-02-02-Boilerplate.html</id>
    <published>2016-02-02T00:00:00Z</published>
    <updated>2016-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  2, 2016
    
</div>

<h3 id="a-haskell-opengl-boilerplate">A Haskell OpenGL Boilerplate</h3>
<p>An attempt to create a concise modern OpenGL Boilerplate.</p>
<p><a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/Boilerplate">here</a> and <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/minimumBoilerplate">here</a></p>
]]></summary>
</entry>
<entry>
    <title>VEX: Better practices</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-03-01-vex-better-practices.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-03-01-vex-better-practices.html</id>
    <published>2015-03-01T00:00:00Z</published>
    <updated>2015-03-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  1, 2015
    
</div>

<h2 id="vex-better-practices">VEX: Better practices</h2>
<p><br />
</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">
<span class="dt">int</span> index = -<span class="dv">1</span>;
<span class="dt">float</span> tmp = -<span class="fl">1.</span>0f;

<span class="kw">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; ncount; i++)
{
  nbrnum = neighbour(geoself(), ptnum, i);
	<span class="kw">if</span> ( product_list[i] &gt; tmp &amp;&amp; not_element_of(visited, nbrnum))
	{
		index = i;
		tmp = product_list[i];
	}
};
	
<span class="kw">return</span> index;</code></pre></div>
<p><br />
</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> sorted_index[] = argsort(product_list);

<span class="kw">for</span>(<span class="dt">int</span> i = len(sorted_index)-<span class="dv">1</span>; i &gt;= <span class="dv">0</span>; i--)
{
 nbrnum = neighbour(geoself(), ptnum, pop(sorted_index));                             		
 <span class="kw">if</span> (not_element_of(visited, nbrnum)){index = nbrnum; <span class="kw">break</span>;}
}
		
<span class="kw">return</span> index;</code></pre></div>
<p>The latter is go, the former - no go. (The former is idiomatic to VOPs)</p>
]]></summary>
</entry>
<entry>
    <title>Haskell OpenGL Tutorial: colored triangle.</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html</id>
    <published>2015-02-22T00:00:00Z</published>
    <updated>2015-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 22, 2015
    
</div>

<h2 id="haskell-opengl-tutorial-colored-triangle.">Haskell OpenGL Tutorial: colored triangle.</h2>
<p><br />
<br />
Credits:</p>
<p>I would like to thank <a href="https://github.com/svenpanne">Sven Panne</a> for providing valuable advice on OpenGL statefulness as well as creating a great set of <a href="https://github.com/haskell-opengl/GLUT/blob/master/examples/RedBook8/Chapter01/Triangles.hs">examples</a>. Without his work, this set of tutorials may not be possible, parts and bits of ios source code is used in various shapes and forms throught these pages.</p>
<p>Sven has recently uploaded a bare-bones <a href="https://github.com/haskell-opengl/GLUT/tree/master/examples/Misc/ColorTriangle">vertex-color triangle example</a> Somebody may find it more useful to follow, because in this tutorial the code related to vertex colors is coupled with NGL.</p>
<p><img src="../images/tutorial04.png" alt="" /><br />
<br />
<a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial04">tutorial files on GitHub</a><br />
<br />
 next: <a href="../posts/2016-02-28-post-post-modern-opengl-in-haskell-4.html">Haskell OpenGL Tutorial: Drawing textured triangles.</a><br />
previous: <a href="../posts/2013-12-30-post-post-modern-opengl-in-haskell-3.html">Haskell OpenGL Tutorial: Resizing main window, key-events.</a><br />
</p>
]]></summary>
</entry>
<entry>
    <title>2+2=4</title>
    <link href="madjestic.github.io/atom.xml/posts/2015-02-22-2-plus-2-equals-4.html" />
    <id>madjestic.github.io/atom.xml/posts/2015-02-22-2-plus-2-equals-4.html</id>
    <published>2015-02-22T00:00:00Z</published>
    <updated>2015-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 22, 2015
    
</div>

<h2 id="section">2+2=4</h2>
<br />
“Leibniz’s proof that 2 + 2 = 4 contains a gap. Grassmann’s definition of a + b is faulty”<br />
from <a href="../files/frege_FOA.pdf">Gottlob Frege: The Foundations of Arithmetic</a><br />
<br />
I am not crazy, and it’s a legit question :P<br />
<br />
“A typical crudity confronts me, when I find calculation described as ‘aggregative mechanical thought’. I doubt whether there exists any though whatsoever answering to this description.”<br />
<br />
“A proposition can be though, and again it may be true; let us never confuse the two things.”<br />
<br />
“Est modus in rebus, sunt certi denique fines” - “There is a measure in all things”<br />
<br />
3 laws of enquiry:<br />
1. Always to separate sharply the psychological from logical, the subjective from the objective;<br />
2. Never to ask for the meaning of the word in isolation, but only in the context of a propositon;<br />
3. Never to loose sight of the distinciton between concept and object.<br />
<br />
(from Shroder) “Abstract number, then, is the empty form of difference.”<br />
<br />
“Hardly anything more unfortunate can befall a scientific writer than to have one of the foundations of his edifice shaken after the work is finished. This was the position I was placed in by a letter of Mr. Bertrand Russell, just when the printing of this volume was nearing its completion.”<br />

]]></summary>
</entry>
<entry>
    <title>An awesome free-game!</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-07-15-another-gem-on-the-road.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-07-15-another-gem-on-the-road.html</id>
    <published>2014-07-15T00:00:00Z</published>
    <updated>2014-07-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 15, 2014
    
</div>

<h2 id="free-game"><a href="https://github.com/fumieval/free-game">free-game</a></h2>
<p>A little gem I found on the way and wish to share with everybody who is in a similar situation.<br />
<br />
</p>
<h3 id="free-game-gives-you-a-world-so-that-you-can-create-games-easily.">“free-game gives you a world so that you can create games easily.”</h3>
<p><br />
<br />
 If you, like me, have been looking for a graphics library and you are obsessive-compulsive about minimalism and bloat-ware, than chances are, <a href="/posts/2013-12-30-post-post-modern-opengl-in-haskell-1.html">like me</a>, you can’t stand the idea of relying on <a href="http://gloss.ouroborus.net/">GLOSS</a> as a graphical backend of your project, than you may be delighted to find out that there’s something out there that is small, fresh, readable, that may be just enough for whatever graphics project you may have in mind: <a href="https://github.com/fumieval/free-game">free-game</a><br />
<br />
 <img src="../images/free_game_demo.png" alt="" /><br />
<br />
 It’s minimal, here’s the list of dependencies:</p>
<pre><code>    array &gt;= 0.4,
    base == 4.*,
    colors == 0.1.*,
    containers &gt;= 0.4,
    control-bool,
    directory &gt;= 1.0,
    filepath &gt;= 1.3,
    free &gt;= 4.6.1 &amp;&amp; &lt; 5,
    freetype2 &gt;= 0.1,
    GLFW-b &gt;= 1.3 &amp;&amp; &lt;2,
    hashable &gt;= 1.2,
    JuicyPixels,
    JuicyPixels-util == 0.1.*,
    linear &gt;= 1.0 &amp;&amp; &lt; 2,
    mtl &gt;= 2.1,
    OpenGL == 2.9.*,
    OpenGLRaw == 1.4.*,
    random == 1.*,
    reflection == 1.*,
    template-haskell,
    transformers &gt;= 0.3,
    vector &gt;= 0.9 &amp;&amp; &lt;0.12,
    void &gt;= 0.5,
    boundingboxes &gt;= 0.2 &amp;&amp; &lt; 0.4,
    lens &gt;= 3.8 &amp;&amp; &lt; 5</code></pre>
<p><br />
</p>
<p>Here’s, for comparison sake, the list of dependencies for <a href="https://github.com/madjestic/NGL">NGL</a>:</p>
<pre><code>	base == 4.*,
	GLFW-b &gt;= 1.3 &amp;&amp; &lt;2,	
	OpenGL == 2.9.*,
	OpenGLRaw == 1.4.*,
	bytestring &gt;= 0.10.0.2</code></pre>
<p>(yes it’s less, but <a href="https://github.com/madjestic/NGL">NGL</a> is not doing anything besides drawing <a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial06">colorful triangles</a>, yet )</p>
<p>The total amount of lines of code of Free-Game is 1727 lines (including white-space). Pretty impressive tight code base that supports:</p>
<p>drawing primitives (lines and shapes)<br />
textures<br />
animation<br />
anti-aliasing and filtering<br />
font-rendering<br />
input-handling (user-event system)<br />
<br />
 All in tight 100Kb of code, brought to you by <a href="https://github.com/fumieval">Fumiaki Kinoshita</a></p>
]]></summary>
</entry>
<entry>
    <title>Product Rule</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-05-22-product-rule.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-05-22-product-rule.html</id>
    <published>2014-05-22T00:00:00Z</published>
    <updated>2014-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 22, 2014
    
</div>

<h3 id="mst124-playing-with-product-rule.">MST124, playing with Product Rule.</h3>
<p><br />
<br />
 Things are becoming obvious.</p>
<p><br />
<br />
<img src="../images/product_rule.png" alt="" /></p>
]]></summary>
</entry>
<entry>
    <title>Gems on the road</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-02-09-gems-on-the-road.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-02-09-gems-on-the-road.html</id>
    <published>2014-02-09T00:00:00Z</published>
    <updated>2014-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  9, 2014
    
</div>

<h3 id="little-things-i-found-on-the-way">Little things I found on the way</h3>
<p><br />
<br />
 The English mathematician G.H. Hardy in the middle of delivering a lecture, Hardy arrived at a point in his argument where he said, “It is now obvious that….” Here he stopped, fell silent, and stood motionless with furrowed brow for a few seconds. Then he walked out of the lecture hall. Twenty minutes later he returned, smiling, and began, “Yes, it is obvious that….”</p>
<p><a href="http://www.amazon.co.uk/Prime-Obsession-Bernhard-Greatest-Mathematics/dp/0452285259/ref=sr_1_1?ie=UTF8&amp;qid=1391968788&amp;sr=8-1&amp;keywords=Prime+Obsession">Prime Obsession, p.55</a></p>
]]></summary>
</entry>
<entry>
    <title>Finding Prime Factorisation</title>
    <link href="madjestic.github.io/atom.xml/posts/2014-02-07-finding-prime-factorisation.html" />
    <id>madjestic.github.io/atom.xml/posts/2014-02-07-finding-prime-factorisation.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  7, 2014
    
</div>

<h2 id="finding-prime-factorisation">Finding Prime Factorisation</h2>
<p><br />
<br />
Here’s a small textbook excercise that I decided to turn into a haskell program:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- | factorize1 function is an interface to factorize function</span>
<span class="ot">factorize1 ::</span> (<span class="dt">Integral</span> b, <span class="dt">RealFrac</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [b]
factorize1 n <span class="fu">=</span> map round <span class="fu">$</span> factorize n <span class="dv">2</span>

<span class="co">-- | factorize requires an index k (since we can&#39;t use variables)</span>
<span class="ot">factorize ::</span> <span class="dt">RealFrac</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [a]
factorize n k
          <span class="fu">|</span> k <span class="fu">&gt;=</span> n <span class="fu">=</span> n <span class="fu">:</span> []
          <span class="fu">|</span> n <span class="ot">`isDivisableBy`</span> k          <span class="fu">=</span> k <span class="fu">:</span> factorize (n<span class="fu">/</span>k) k
          <span class="fu">|</span> n <span class="ot">`isDivisableBy`</span> k <span class="fu">==</span> <span class="dt">False</span> <span class="fu">=</span> factorize n (k<span class="fu">+</span><span class="dv">1</span>)</code></pre></div>
<p><br />
<br />
 And a small supporting function that returns True if the product is a full number, and False otherwise</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">isDivisableBy ::</span> <span class="dt">RealFrac</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
isDivisableBy n m <span class="fu">=</span> <span class="kw">let</span> fullNumber <span class="fu">=</span> fromInteger <span class="fu">$</span> round (n<span class="fu">/</span>m)
                    <span class="kw">in</span> (n<span class="fu">/</span>m) <span class="fu">==</span> fullNumber</code></pre></div>
<p><br />
<br />
Example output:</p>
<pre><code>&gt; factorize1 1000645
[5,29,67,103]
</code></pre>
<p><br />
<br />
Hope you enjoyed it as I did :)</p>
<p><a href="https://github.com/madjestic/TinyMath">source files on GitHub</a></p>
]]></summary>
</entry>
<entry>
    <title>Haskell OpenGL Tutorial: drawing 2 triangles.</title>
    <link href="madjestic.github.io/atom.xml/posts/2013-12-30-post-post-modern-opengl-in-haskell-3.html" />
    <id>madjestic.github.io/atom.xml/posts/2013-12-30-post-post-modern-opengl-in-haskell-3.html</id>
    <published>2013-12-30T00:00:00Z</published>
    <updated>2013-12-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 30, 2013
    
</div>

<h2 id="haskell-opengl-tutorial-drawing-2-triangles.">Haskell OpenGL Tutorial: drawing 2 triangles.</h2>
<p><br />
<br />
We continue with introducing basic vertex/fragment shader support, vertex buffer array object.</p>
<p>In this tutorial we are finally going to draw our first triangles and, as we are going to see, it adds a chunk of complexity to our code - in fact enough to feel that there could be another tutorial in-between tutorial01 and tutorial02 as there’s a noticable spike between the two at the moment. For now - fasten your seat-belts - we are going for a ride!</p>
<p>Parts of the code and module LoadShaders taken from <a href="https://github.com/haskell-opengl/GLUT/blob/master/examples/RedBook8/Chapter01/Triangles.hs">svenpanne GLUT example files</a></p>
<p>The code was modified in order to exclude GLUT dependencies.<br />
<br />
The main addition on top what we have done in previous tutorials is the initRsources function, that is doing the following things:</p>
<ol style="list-style-type: decimal">
<li>Generates and binds an object name “triangles” to a VertexArrayObject:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">initResources ::</span> <span class="dt">IO</span> <span class="dt">Descriptor</span>
initResources <span class="fu">=</span> <span class="kw">do</span>
  triangles <span class="ot">&lt;-</span> genObjectName
  bindVertexArrayObject <span class="fu">$=</span> <span class="dt">Just</span> triangles</code></pre></div>
<p><br />
<br />
2) Creates a list of values of type Vertex2 (to store vertex positions):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> vertices <span class="fu">=</span> [
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.90</span>) (<span class="fu">-</span><span class="fl">0.90</span>),  <span class="co">-- Triangle 1</span>
        <span class="dt">Vertex2</span>   <span class="fl">0.85</span>  (<span class="fu">-</span><span class="fl">0.90</span>),
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.90</span>)   <span class="fl">0.85</span> ,
        <span class="dt">Vertex2</span>   <span class="fl">0.90</span>  (<span class="fu">-</span><span class="fl">0.85</span>),  <span class="co">-- Triangle 2</span>
        <span class="dt">Vertex2</span>   <span class="fl">0.90</span>    <span class="fl">0.90</span> ,
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.85</span>)   <span class="fl">0.90</span> ]<span class="ot"> ::</span> [<span class="dt">Vertex2</span> <span class="dt">GLfloat</span>]</code></pre></div>
<p><br />
<br />
3) Generates, binds an object name arrayBuffer to an ArrayBuffer and writes the vertices list to memory:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  arrayBuffer <span class="ot">&lt;-</span> genObjectName
  bindBuffer <span class="dt">ArrayBuffer</span> <span class="fu">$=</span> <span class="dt">Just</span> arrayBuffer
  withArray vertices <span class="fu">$</span> \ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> size <span class="fu">=</span> fromIntegral (numVertices <span class="fu">*</span> sizeOf (head vertices))
    bufferData <span class="dt">ArrayBuffer</span> <span class="fu">$=</span> (size, ptr, <span class="dt">StaticDraw</span>)</code></pre></div>
<p><br />
<br />
4) Gives and index and initializes a pointer to the memory address that conains the vertices positions.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">let</span> firstIndex <span class="fu">=</span> <span class="dv">0</span>
      vPosition <span class="fu">=</span> <span class="dt">AttribLocation</span> <span class="dv">0</span>
  vertexAttribPointer vPosition <span class="fu">$=</span>
    (<span class="dt">ToFloat</span>, <span class="dt">VertexArrayDescriptor</span> <span class="dv">2</span> <span class="dt">Float</span> <span class="dv">0</span> (bufferOffset firstIndex))
  vertexAttribArray vPosition <span class="fu">$=</span> <span class="dt">Enabled</span></code></pre></div>
<p><br />
That makes this data accessible in the vertex shader:</p>
<div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="fu">layout</span>(location = <span class="dv">0</span>) <span class="dt">in</span> <span class="dt">vec4</span> vPosition;</code></pre></div>
<p><br />
<br />
5) Finally we bind vertex and fragment shaders to the current program, and return the Dexscriptor object to the main loop:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Descriptor</span> <span class="fu">=</span> <span class="dt">Descriptor</span> <span class="dt">VertexArrayObject</span> <span class="dt">ArrayIndex</span> <span class="dt">NumArrayIndices</span>

<span class="fu">...</span>

 program <span class="ot">&lt;-</span> loadShaders [
     <span class="dt">ShaderInfo</span> <span class="dt">VertexShader</span> (<span class="dt">FileSource</span> <span class="st">&quot;triangles.vert&quot;</span>),
     <span class="dt">ShaderInfo</span> <span class="dt">FragmentShader</span> (<span class="dt">FileSource</span> <span class="st">&quot;triangles.frac&quot;</span>)]
  currentProgram <span class="fu">$=</span> <span class="dt">Just</span> program

  return <span class="fu">$</span> <span class="dt">Descriptor</span> triangles firstIndex (fromIntegral numVertices)</code></pre></div>
<p>Phew! That was quite a mouthfull. A similar program in C++ could still run without GLSL shading part. Unfortunately it does not work with this example. If there’s a way - one day this tutorial may be split into two separate ones.</p>
<p><br />
<br />
Here’s the whole program:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Graphics.Rendering.OpenGL</span> <span class="kw">as</span> <span class="dt">GL</span>
<span class="kw">import </span><span class="dt">Graphics.UI.GLFW</span> <span class="kw">as</span> <span class="dt">GLFW</span>
<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">LoadShaders</span>
<span class="kw">import </span><span class="dt">Foreign.Marshal.Array</span>
<span class="kw">import </span><span class="dt">Foreign.Ptr</span>
<span class="kw">import </span><span class="dt">Foreign.Storable</span>


<span class="ot">bufferOffset ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ptr</span> b
bufferOffset <span class="fu">=</span> plusPtr nullPtr <span class="fu">.</span> fromIntegral


<span class="kw">data</span> <span class="dt">Descriptor</span> <span class="fu">=</span> <span class="dt">Descriptor</span> <span class="dt">VertexArrayObject</span> <span class="dt">ArrayIndex</span> <span class="dt">NumArrayIndices</span>


<span class="ot">initResources ::</span> <span class="dt">IO</span> <span class="dt">Descriptor</span>
initResources <span class="fu">=</span> <span class="kw">do</span>
  triangles <span class="ot">&lt;-</span> genObjectName
  bindVertexArrayObject <span class="fu">$=</span> <span class="dt">Just</span> triangles

  <span class="kw">let</span> vertices <span class="fu">=</span> [
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.90</span>) (<span class="fu">-</span><span class="fl">0.90</span>),  <span class="co">-- Triangle 1</span>
        <span class="dt">Vertex2</span>   <span class="fl">0.85</span>  (<span class="fu">-</span><span class="fl">0.90</span>),
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.90</span>)   <span class="fl">0.85</span> ,
        <span class="dt">Vertex2</span>   <span class="fl">0.90</span>  (<span class="fu">-</span><span class="fl">0.85</span>),  <span class="co">-- Triangle 2</span>
        <span class="dt">Vertex2</span>   <span class="fl">0.90</span>    <span class="fl">0.90</span> ,
        <span class="dt">Vertex2</span> (<span class="fu">-</span><span class="fl">0.85</span>)   <span class="fl">0.90</span> ]<span class="ot"> ::</span> [<span class="dt">Vertex2</span> <span class="dt">GLfloat</span>]
      numVertices <span class="fu">=</span> length vertices

  arrayBuffer <span class="ot">&lt;-</span> genObjectName
  bindBuffer <span class="dt">ArrayBuffer</span> <span class="fu">$=</span> <span class="dt">Just</span> arrayBuffer
  withArray vertices <span class="fu">$</span> \ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> size <span class="fu">=</span> fromIntegral (numVertices <span class="fu">*</span> sizeOf (head vertices))
    bufferData <span class="dt">ArrayBuffer</span> <span class="fu">$=</span> (size, ptr, <span class="dt">StaticDraw</span>)

  <span class="kw">let</span> firstIndex <span class="fu">=</span> <span class="dv">0</span>
      vPosition <span class="fu">=</span> <span class="dt">AttribLocation</span> <span class="dv">0</span>
  vertexAttribPointer vPosition <span class="fu">$=</span>
    (<span class="dt">ToFloat</span>, <span class="dt">VertexArrayDescriptor</span> <span class="dv">2</span> <span class="dt">Float</span> <span class="dv">0</span> (bufferOffset firstIndex))
  vertexAttribArray vPosition <span class="fu">$=</span> <span class="dt">Enabled</span>

  program <span class="ot">&lt;-</span> loadShaders [
     <span class="dt">ShaderInfo</span> <span class="dt">VertexShader</span> (<span class="dt">FileSource</span> <span class="st">&quot;triangles.vert&quot;</span>),
     <span class="dt">ShaderInfo</span> <span class="dt">FragmentShader</span> (<span class="dt">FileSource</span> <span class="st">&quot;triangles.frac&quot;</span>)]
  currentProgram <span class="fu">$=</span> <span class="dt">Just</span> program

  return <span class="fu">$</span> <span class="dt">Descriptor</span> triangles firstIndex (fromIntegral numVertices)

                    
<span class="ot">resizeWindow ::</span> <span class="dt">Size</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
resizeWindow size<span class="fu">@</span>(<span class="dt">GL.Size</span> w h) <span class="fu">=</span>
    <span class="kw">do</span>
      GL.viewport   <span class="fu">$=</span> (<span class="dt">GL.Position</span> <span class="dv">0</span> <span class="dv">0</span>, size)
      GL.matrixMode <span class="fu">$=</span> <span class="dt">GL.Projection</span>
      GL.loadIdentity
      GL.ortho2D <span class="dv">0</span> (realToFrac w) (realToFrac h) <span class="dv">0</span>


<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  GLFW.initialize
  GLFW.openWindow (<span class="dt">GL.Size</span> <span class="dv">640</span> <span class="dv">480</span>) [] <span class="dt">GLFW.Window</span>
  GLFW.windowTitle <span class="fu">$=</span> <span class="st">&quot;GLFW Demo&quot;</span>
  GLFW.windowSizeCallback <span class="fu">$=</span> resizeWindow
  descriptor <span class="ot">&lt;-</span> initResources
  onDisplay descriptor
  GLFW.closeWindow
  GLFW.terminate


<span class="ot">onDisplay ::</span> <span class="dt">Descriptor</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
onDisplay descriptor<span class="fu">@</span>(<span class="dt">Descriptor</span> triangles firstIndex numVertices) <span class="fu">=</span> <span class="kw">do</span>
  GL.clearColor <span class="fu">$=</span> <span class="dt">Color4</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span>
  GL.clear [<span class="dt">ColorBuffer</span>]
  bindVertexArrayObject <span class="fu">$=</span> <span class="dt">Just</span> triangles
  drawArrays <span class="dt">Triangles</span> firstIndex numVertices
  GLFW.swapBuffers

  p <span class="ot">&lt;-</span> GLFW.getKey <span class="dt">GLFW.ESC</span>
  unless (p <span class="fu">==</span> <span class="dt">GLFW.Press</span>) <span class="fu">$</span> onDisplay descriptor</code></pre></div>
<p><br />
<br />
<img src="../images/tutorial02.png" alt="" /><br />
<br />
<a href="https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/tutorial02">tutorial files on GitHub</a><br />
<br />
 next: <a href="../posts/2015-02-22-haskell-opengl-tutorial-drawing-a-colored-triangle.html">Haskell OpenGL Tutorial: colored triangle.</a><br />
previous: <a href="../posts/2013-12-30-post-post-modern-opengl-in-haskell-2.html">Haskell OpenGL Tutorial: Resizing main window, key-events.</a></p>
]]></summary>
</entry>

</feed>
